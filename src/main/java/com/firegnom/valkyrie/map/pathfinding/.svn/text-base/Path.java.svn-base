package com.firegnom.valkyrie.map.pathfinding;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;

/**
 * A path determined by some path finding algorithm. A series of steps from
 * the starting location to the target location. This includes a step for the
 * initial location.
 * 
 * @author Kevin Glass
 */
public class Path implements Iterable<Step> {
	/** The list of steps building up this path */
	public LinkedList <Step> steps = new LinkedList <Step>();

	/**
	 * Create an empty path
	 */
	public Path() {

	}

	public Path(com.firegnom.valkyrie.net.protocol.Path path) {
     for (int i = 0 ; i < path.step.length ;i++){
       steps.add(new Step(path.step[i].x,path.step[i].y));
     }
  }

  /**
	 * Get the length of the path, i.e. the number of steps
	 * 
	 * @return The number of steps in this path
	 */
	public int getLength() {
		return steps.size();
	}

	/**
	 * Get the step at a given index in the path
	 * 
	 * @param index The index of the step to retrieve. Note this should
	 * be >= 0 and < getLength();
	 * @return The step information, the position on the map.
	 */
	public Step getStep(int index) {
	  //steps.
		return steps.get(index);
	}

	/**
	 * Get the x coordinate for the step at the given index
	 * 
	 * @param index The index of the step whose x coordinate should be retrieved
	 * @return The x coordinate at the step
	 */
	public int getX(int index) {
		return getStep(index).position.x;
	}

	/**
	 * Get the y coordinate for the step at the given index
	 * 
	 * @param index The index of the step whose y coordinate should be retrieved
	 * @return The y coordinate at the step
	 */
	public int getY(int index) {
		return getStep(index).position.y;
	}

	/**
	 * Append a step to the path.  
	 * 
	 * @param x The x coordinate of the new step
	 * @param y The y coordinate of the new step
	 */
	public void appendStep(int x, int y) {
		steps.add(new Step(x,y));
	}

	/**
	 * Prepend a step to the path.  
	 * 
	 * @param x The x coordinate of the new step
	 * @param y The y coordinate of the new step
	 */
	public void prependStep(int x, int y) {
		steps.add(0, new Step(x, y));
	}

	/**
	 * Check if this path contains the given step
	 * 
	 * @param x The x coordinate of the step to check for
	 * @param y The y coordinate of the step to check for
	 * @return True if the path contains the given step
	 */
	public boolean contains(int x, int y) {
		return steps.contains(new Step(x,y));
	}


	@Override
	public String toString() {
		// TODO Auto-generated method stub
		String ret = "Path :";
		for (Step s : this){
			ret += "("+s.position.x+","+s.position.y+")";
		}
		return ret;

	}

  public Iterator<Step> iterator() {
    // TODO Auto-generated method stub
    return steps.iterator();
  }
//TODO: not optimised 
  public com.firegnom.valkyrie.net.protocol.Path convertToNetPath() {
    com.firegnom.valkyrie.net.protocol.Path p = new com.firegnom.valkyrie.net.protocol.Path();
    com.firegnom.valkyrie.net.protocol.Step [] st = new com.firegnom.valkyrie.net.protocol.Step[this.steps.size()];
    for (int i = 0 ; i < st.length ; i ++){
      st[i] = new com.firegnom.valkyrie.net.protocol.Step();
      st[i].setX((short)this.steps.get(i).position.x);
      st[i].setY((short)this.steps.get(i).position.y);
    }
    p.setStep(st);
    return p;
  }

	



}
