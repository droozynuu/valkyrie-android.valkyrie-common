/**  * MooDS Encoder/Decoder for Flash. * Encoding version: 1200 * @author Generated by MooDS Generator v2.1.0 - 2006 CNAM, INT, Filao  */package com.firegnom.valkyrie.net.protocol.client;import com.firegnom.valkyrie.net.protocol.*;import java.util.Hashtable;import java.io.DataOutput;import java.io.DataInput;//This class has been generated by MooDS Generator to handle objects// for binarisation input/output.public class CustomTypes {	// types	public final static byte TYPE_PLAYERMOVE = 1;	public final static byte TYPE_CONFIRMMOVE = 2;	public final static byte TYPE_PLAYERDISCONNECTED = 3;	public final static byte TYPE_CHATMESSAGE = 4;	public final static byte TYPE_CHATUSERJOINED = 5;	public final static byte TYPE_CHATUSERLEFT = 6;	public final static byte TYPE_CHANGEGAMEMODE = 7;	public final static byte TYPE_REQUESTPLAYERINFOMESSAGE = 8;	public final static byte TYPE_CREATEUSERMESSAGE = 9;	public final static byte TYPE_PLAYERINFOMESSAGE = 10;	public final static byte TYPE_PLAYERPOSITIONSMESSAGE = 11;	public final static byte TYPE_PLAYERPOSITIONMESSAGE = 12;	public final static byte TYPE_REQUESTPLAYERSPOSITIONMESSAGE = 13;	// encodeData root method	public static void encodeData(Hashtable h,DataOutput dos) throws Exception {		dos.writeShort(1200);		dos.writeShort(h.size());		int nbSend = h.size();		for(int i=0; i <nbSend; i++){			Object o = h.get(""+i);			if (o instanceof PlayerMove) {				dos.writeByte(TYPE_PLAYERMOVE);				encodePlayerMove(dos,((PlayerMove) o));			}			if (o instanceof ConfirmMove) {				dos.writeByte(TYPE_CONFIRMMOVE);				encodeConfirmMove(dos,((ConfirmMove) o));			}			if (o instanceof PlayerDisconnected) {				dos.writeByte(TYPE_PLAYERDISCONNECTED);				encodePlayerDisconnected(dos,((PlayerDisconnected) o));			}			if (o instanceof ChatMessage) {				dos.writeByte(TYPE_CHATMESSAGE);				encodeChatMessage(dos,((ChatMessage) o));			}			if (o instanceof ChatUserJoined) {				dos.writeByte(TYPE_CHATUSERJOINED);				encodeChatUserJoined(dos,((ChatUserJoined) o));			}			if (o instanceof ChatUserLeft) {				dos.writeByte(TYPE_CHATUSERLEFT);				encodeChatUserLeft(dos,((ChatUserLeft) o));			}			if (o instanceof ChangeGameMode) {				dos.writeByte(TYPE_CHANGEGAMEMODE);				encodeChangeGameMode(dos,((ChangeGameMode) o));			}			if (o instanceof RequestPlayerInfoMessage) {				dos.writeByte(TYPE_REQUESTPLAYERINFOMESSAGE);				encodeRequestPlayerInfoMessage(dos,((RequestPlayerInfoMessage) o));			}			if (o instanceof CreateUserMessage) {				dos.writeByte(TYPE_CREATEUSERMESSAGE);				encodeCreateUserMessage(dos,((CreateUserMessage) o));			}			if (o instanceof PlayerInfoMessage) {				dos.writeByte(TYPE_PLAYERINFOMESSAGE);				encodePlayerInfoMessage(dos,((PlayerInfoMessage) o));			}			if (o instanceof PlayerPositionsMessage) {				dos.writeByte(TYPE_PLAYERPOSITIONSMESSAGE);				encodePlayerPositionsMessage(dos,((PlayerPositionsMessage) o));			}			if (o instanceof PlayerPositionMessage) {				dos.writeByte(TYPE_PLAYERPOSITIONMESSAGE);				encodePlayerPositionMessage(dos,((PlayerPositionMessage) o));			}			if (o instanceof RequestPlayersPositionMessage) {				dos.writeByte(TYPE_REQUESTPLAYERSPOSITIONMESSAGE);				encodeRequestPlayersPositionMessage(dos,((RequestPlayersPositionMessage) o));			}		}	}	// decodeData rooy method	public static Hashtable decodeData(DataInput dis) throws Exception {		dis.readShort();		Hashtable h = new Hashtable();		short nb = dis.readShort();		int nbObj = nb;		while (nb != 0) {			String key = ""+(nbObj - nb);			byte type = dis.readByte();			if (type == 1) {				PlayerMove customType = decodePlayerMove(dis);				h.put(key,customType);			}			if (type == 2) {				ConfirmMove customType = decodeConfirmMove(dis);				h.put(key,customType);			}			if (type == 3) {				PlayerDisconnected customType = decodePlayerDisconnected(dis);				h.put(key,customType);			}			if (type == 4) {				ChatMessage customType = decodeChatMessage(dis);				h.put(key,customType);			}			if (type == 5) {				ChatUserJoined customType = decodeChatUserJoined(dis);				h.put(key,customType);			}			if (type == 6) {				ChatUserLeft customType = decodeChatUserLeft(dis);				h.put(key,customType);			}			if (type == 7) {				ChangeGameMode customType = decodeChangeGameMode(dis);				h.put(key,customType);			}			if (type == 8) {				RequestPlayerInfoMessage customType = decodeRequestPlayerInfoMessage(dis);				h.put(key,customType);			}			if (type == 9) {				CreateUserMessage customType = decodeCreateUserMessage(dis);				h.put(key,customType);			}			if (type == 10) {				PlayerInfoMessage customType = decodePlayerInfoMessage(dis);				h.put(key,customType);			}			if (type == 11) {				PlayerPositionsMessage customType = decodePlayerPositionsMessage(dis);				h.put(key,customType);			}			if (type == 12) {				PlayerPositionMessage customType = decodePlayerPositionMessage(dis);				h.put(key,customType);			}			if (type == 13) {				RequestPlayersPositionMessage customType = decodeRequestPlayersPositionMessage(dis);				h.put(key,customType);			}			nb--;		}		return h;	}	// encoding method for each custom type	public static void encodeStep(DataOutput dos,Step customType) throws Exception {		dos.writeShort(customType.getX());		dos.writeShort(customType.getY());	}	public static void encodePath(DataOutput dos,Path customType) throws Exception {		Step[] table1 = customType.getStep();		int table1_l0 = table1.length;		dos.writeInt((int) table1_l0);		if (table1_l0>0) {			for(int i0=0; i0 <table1_l0; i0++){				encodeStep(dos,table1[i0]);			}		}	}	public static void encodePlayerMove(DataOutput dos,PlayerMove customType) throws Exception {		dos.writeUTF(customType.getPlayerName());		dos.writeInt(customType.getPlayerClass());		encodePath(dos,customType.getPath());	}	public static void encodeConfirmMove(DataOutput dos,ConfirmMove customType) throws Exception {		dos.writeShort(customType.getId());	}	public static void encodePlayerDisconnected(DataOutput dos,PlayerDisconnected customType) throws Exception {		dos.writeUTF(customType.getPlayerName());	}	public static void encodeChatMessage(DataOutput dos,ChatMessage customType) throws Exception {		dos.writeUTF(customType.getUsername());		dos.writeUTF(customType.getMessage());	}	public static void encodeChatUserJoined(DataOutput dos,ChatUserJoined customType) throws Exception {		dos.writeUTF(customType.getUsername());	}	public static void encodeChatUserLeft(DataOutput dos,ChatUserLeft customType) throws Exception {		dos.writeUTF(customType.getUsername());	}	public static void encodeChangeGameMode(DataOutput dos,ChangeGameMode customType) throws Exception {		dos.writeInt(customType.getType());	}	public static void encodeRequestPlayerInfoMessage(DataOutput dos,RequestPlayerInfoMessage customType) throws Exception {	}	public static void encodeCreateUserMessage(DataOutput dos,CreateUserMessage customType) throws Exception {		dos.writeInt(customType.getPlayerClass());	}	public static void encodePlayerInfoMessage(DataOutput dos,PlayerInfoMessage customType) throws Exception {		dos.writeInt(customType.getPlayerClass());		dos.writeUTF(customType.getZoneName());		encodePlayerPositionMessage(dos,customType.getPosition());		encodePlayerStats(dos,customType.getStats());	}	public static void encodePlayerPositionsMessage(DataOutput dos,PlayerPositionsMessage customType) throws Exception {		PlayerPositionMessage[] table1 = customType.getPlayerPositionMessage();		int table1_l0 = table1.length;		dos.writeInt((int) table1_l0);		if (table1_l0>0) {			for(int i0=0; i0 <table1_l0; i0++){				encodePlayerPositionMessage(dos,table1[i0]);			}		}	}	public static void encodePlayerPositionMessage(DataOutput dos,PlayerPositionMessage customType) throws Exception {		dos.writeUTF(customType.getUserName());		dos.writeInt(customType.getPlayerClass());		dos.writeShort(customType.getX());		dos.writeShort(customType.getY());	}	public static void encodePlayerStats(DataOutput dos,PlayerStats customType) throws Exception {		dos.writeInt(customType.getHp());		dos.writeInt(customType.getMaxHp());		dos.writeInt(customType.getMp());		dos.writeInt(customType.getMaxMp());	}	public static void encodeRequestPlayersPositionMessage(DataOutput dos,RequestPlayersPositionMessage customType) throws Exception {	}	// decoding method for each custom type	public static Step decodeStep(DataInput dis) throws Exception {		Step customType = new Step();		customType.setX(dis.readShort());		customType.setY(dis.readShort());		return customType;	}	public static Path decodePath(DataInput dis) throws Exception {		Path customType = new Path();		int table1_l0 = dis.readInt();		if (table1_l0>0) {			Step[] table1 = new Step[table1_l0];			for(int i0=0; i0 <table1_l0; i0++){					table1[i0] = decodeStep(dis);			}			customType.setStep(table1);		}		return customType;	}	public static PlayerMove decodePlayerMove(DataInput dis) throws Exception {		PlayerMove customType = new PlayerMove();		customType.setPlayerName(dis.readUTF());		customType.setPlayerClass(dis.readInt());		customType.setPath(decodePath(dis));		return customType;	}	public static ConfirmMove decodeConfirmMove(DataInput dis) throws Exception {		ConfirmMove customType = new ConfirmMove();		customType.setId(dis.readShort());		return customType;	}	public static PlayerDisconnected decodePlayerDisconnected(DataInput dis) throws Exception {		PlayerDisconnected customType = new PlayerDisconnected();		customType.setPlayerName(dis.readUTF());		return customType;	}	public static ChatMessage decodeChatMessage(DataInput dis) throws Exception {		ChatMessage customType = new ChatMessage();		customType.setUsername(dis.readUTF());		customType.setMessage(dis.readUTF());		return customType;	}	public static ChatUserJoined decodeChatUserJoined(DataInput dis) throws Exception {		ChatUserJoined customType = new ChatUserJoined();		customType.setUsername(dis.readUTF());		return customType;	}	public static ChatUserLeft decodeChatUserLeft(DataInput dis) throws Exception {		ChatUserLeft customType = new ChatUserLeft();		customType.setUsername(dis.readUTF());		return customType;	}	public static ChangeGameMode decodeChangeGameMode(DataInput dis) throws Exception {		ChangeGameMode customType = new ChangeGameMode();		customType.setType(dis.readInt());		return customType;	}	public static RequestPlayerInfoMessage decodeRequestPlayerInfoMessage(DataInput dis) throws Exception {		RequestPlayerInfoMessage customType = new RequestPlayerInfoMessage();		return customType;	}	public static CreateUserMessage decodeCreateUserMessage(DataInput dis) throws Exception {		CreateUserMessage customType = new CreateUserMessage();		customType.setPlayerClass(dis.readInt());		return customType;	}	public static PlayerInfoMessage decodePlayerInfoMessage(DataInput dis) throws Exception {		PlayerInfoMessage customType = new PlayerInfoMessage();		customType.setPlayerClass(dis.readInt());		customType.setZoneName(dis.readUTF());		customType.setPosition(decodePlayerPositionMessage(dis));		customType.setStats(decodePlayerStats(dis));		return customType;	}	public static PlayerPositionsMessage decodePlayerPositionsMessage(DataInput dis) throws Exception {		PlayerPositionsMessage customType = new PlayerPositionsMessage();		int table1_l0 = dis.readInt();		if (table1_l0>0) {			PlayerPositionMessage[] table1 = new PlayerPositionMessage[table1_l0];			for(int i0=0; i0 <table1_l0; i0++){					table1[i0] = decodePlayerPositionMessage(dis);			}			customType.setPlayerPositionMessage(table1);		}		return customType;	}	public static PlayerPositionMessage decodePlayerPositionMessage(DataInput dis) throws Exception {		PlayerPositionMessage customType = new PlayerPositionMessage();		customType.setUserName(dis.readUTF());		customType.setPlayerClass(dis.readInt());		customType.setX(dis.readShort());		customType.setY(dis.readShort());		return customType;	}	public static PlayerStats decodePlayerStats(DataInput dis) throws Exception {		PlayerStats customType = new PlayerStats();		customType.setHp(dis.readInt());		customType.setMaxHp(dis.readInt());		customType.setMp(dis.readInt());		customType.setMaxMp(dis.readInt());		return customType;	}	public static RequestPlayersPositionMessage decodeRequestPlayersPositionMessage(DataInput dis) throws Exception {		RequestPlayersPositionMessage customType = new RequestPlayersPositionMessage();		return customType;	}}